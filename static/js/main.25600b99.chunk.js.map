{"version":3,"sources":["components/Authorization/AuthElements/TitleElement/TitleElement.module.css","components/Tasks/TaskItem/TaskHeader/TaskHeader.module.css","components/Tasks/TaskItem/TaskItem.module.css","components/UI/Modals/ModalSpinner/ModalSpinner.module.css","components/UI/Navigation/NavigationLinks/NavigationLink/NavigationLink.module.css","components/Authorization/AuthElements/InputElement/InputElement.module.css","assets/images/logo.png","components/Authorization/AuthElements/SubmitButton/SubmitButton.module.css","components/UI/AlertMessage/AlertMessage.module.css","components/Authorization/SignIn/SignIn.module.css","components/Authorization/SignUp/SignUp.module.css","components/Tasks/TaskItem/TaskFooter/TaskFooter.module.css","components/Tasks/TaskItem/TaskTitle/TaskTitle.module.css","components/Task/CreateTask/CreateTask.module.css","components/Task/EditTask/EditTask.module.css","assets/images/logo-invert.png","components/UI/Navigation/NavigationBrand/NavigationBrand.module.css","components/UI/Navigation/NavigationLinks/AuthLinks/LogoutButton/LogoutButton.module.css","components/Task/TaskComponents/TaskComponents.module.css","components/Authorization/AuthElements/InputElement/InputElement.js","components/Authorization/AuthElements/TitleElement/TitleElement.js","components/Authorization/AuthElements/RememberMe/RememberMe.js","components/Authorization/AuthElements/SubmitButton/SubmitButton.js","components/UI/AlertMessage/AlertMessage.js","utility/axios-instance.js","store/actions/authorization.js","store/actions/actionTypes.js","utility/validation.js","components/Authorization/SignIn/SignIn.js","components/Authorization/SignUp/SignUp.js","components/Tasks/TaskItem/TaskHeader/TaskMenu/TaskMenu.js","components/Tasks/TaskItem/TaskHeader/TaskHeader.js","components/Tasks/TaskItem/TaskFooter/TaskFooter.js","components/Tasks/TaskItem/TaskTitle/TaskTitle.js","components/Tasks/TaskItem/TaskItem.js","components/UI/Modals/ModalSpinner/ModalSpinner.js","components/UI/Modals/ModalPrompt/ModalPrompt.js","components/UI/Modals/ModalConfirm/ModalConfirm.js","components/Tasks/Tasks.js","store/actions/tasks.js","components/Task/TaskComponents/Title/Title.js","components/Task/TaskComponents/Description/Description.js","components/Task/TaskComponents/Instructions/Actions/Action/Action.js","components/Task/TaskComponents/Instructions/Actions/Actions.js","components/Task/TaskComponents/Instructions/Inctruction/Instruction.js","components/Task/TaskComponents/Instructions/Instructions.js","components/Task/TaskComponents/Button/Button.js","components/UI/ColHOC/ColHOC.js","components/Task/CreateTask/CreateTask.js","components/Task/EditTask/EditTask.js","components/UI/Navigation/NavigationBrand/NavigationBrand.js","components/UI/Navigation/NavigationLinks/NavigationLink/NavigationLink.js","components/UI/Navigation/NavigationLinks/AuthLinks/LogoutButton/LogoutButton.js","components/UI/Navigation/NavigationLinks/AuthLinks/AuthLinks.js","components/UI/Navigation/NavigationLinks/NavigationLinks.js","components/UI/Navigation/Navigation.js","components/Layout/Layout.js","store/actions/socket.js","utility/auto-login.js","App.js","serviceWorker.js","store/reducers/authorization.js","store/reducers/tasks.js","store/reducers/socket.js","index.js","components/Tasks/TaskItem/TaskHeader/TaskMenu/TaskMenu.module.css"],"names":["module","exports","InputElement","props","Form","Group","className","classes","input","Label","label","Control","type","placeholder","onChange","onInput","value","isInvalid","error","Feedback","helperText","TitleElement","titleBlock","src","Logo","alt","height","titleText","children","RememberMe","Check","id","custom","SubmitButton","spinner","startAuth","Spinner","as","animation","size","role","aria-hidden","Button","variant","submitBtn","onClick","disabled","text","AlertMessage","result","message","Alert","alert","onClose","hideAlert","dismissible","style","margin","instance","axios","create","baseURL","errorActionCreator","err","loginActionCreator","token","rememberData","remember","signInLocalAction","dispatch","defaults","headers","common","localStorage","getItem","resetTokenTimer","getState","clearTimeout","auth","refreshTimerId","delay","expirationTime","Math","floor","Date","getTime","timerId","setTimeout","refreshTokenAction","console","log","newTimeoutIdActionCreator","post","then","newToken","data","refreshTokenActionCreator","catch","changeValidationMessage","isValid","currMessage","length","validation","string","validationRules","originalEmail","validationMessage","isRequred","isEmail","test","minLength","maxLength","shoudBeEqual","connect","state","errorMessage","email","authStart","onSignIn","userData","rememberMe","user","useState","setRememberMe","config","password","stateInputs","setStateInputs","to","onInputHandler","inputName","event","newValue","target","currentValid","newValidationMessage","prevState","inputs","fieldsIsValid","key","push","bind","Container","fluid","Row","Col","sm","md","preventDefault","redirectLink","onSignUp","newUser","emailIsCorrect","setEmailIsCorrect","emailTimeoutId","setEmailTimeoutId","emailConfirm","useEffect","timeoutId","response","checkEmailIsCorrect","TaskMenu","clickHandler","func","stopPropagation","OverlayTrigger","trigger","rootCloseEvent","placement","overlay","Popover","Content","popoverBody","popoverItem","openShareTaskModal","leaveIcon","icon","faShareSquare","openLeaveTaskModal","faDoorOpen","faEllipsisV","TaskHeader","taskSharedBy","sender","Card","Header","taskIcon","faTasks","Tooltip","sharedBy","TaskFooter","lastUpdateDate","createDate","cardBottomText","faCalendarDay","toLocaleString","faCalendarPlus","toLocaleDateString","TaskTitle","title","Title","cardTitle","pathname","taskId","TaskItem","cardDiv","bg","task","Body","_id","Text","cardText","description","date","ModalSpinner","spinnerModal","ModalPrompt","inputValue","setInputValue","modalCloseHandler","hideModal","Fragment","Modal","show","onHide","closeButton","FormControl","Footer","onConfirm","ModalConfirm","fetching","tasks","userId","userEmail","socket","sckt","fetchTasks","get","fetchTasksActionCreator","fetchTasksAction","clearTasksList","reciveTask","reciveTaskActionCreator","leaveTask","patch","leaveTaskActionCreator","leaveTaskAction","loading","setLoading","shareModalOpen","setShareModalOpen","leaveModalOpen","setLeaveModalOpen","choosedTaskId","setChoosedTaskId","shareResultAlert","setShareResultAlert","on","removeListener","reciverEmail","taskData","senderId","sharedTask","find","emit","handleError","map","lg","createTaskLabel","mainTitle","Description","InstructionsAction","actionClass","InsctructionsActions","ListGroup","Item","manageItems","addItem","faPlusCircle","onAdd","removeItem","faMinusCircle","onRemove","Instruction","listItem","Badge","pill","number","Instrcutions","Actions","items","item","index","TaskButton","button","ColHOC","instructions","setTask","savingTask","setSavingTask","resultMessage","setResultMessage","onTextChangeHandler","prevTask","clearArray","arr","filter","trim","inputsBlock","Instructions","newItems","pop","newInstrcutionValue","validateTask","ownerId","formTask","history","location","resTask","NavigationBrand","Navbar","Brand","brandLink","NavigationLink","navLink","activeClassName","navLinkActive","LogoutButton","logoutBtn","logout","faSignOutAlt","faUserPlus","faSignInAlt","NavigationLinks","Collapse","Nav","faPlusSquare","Navigation","collapseOnSelect","expand","fixed","Toggle","aria-controls","signInByLocalData","refreshTokenAndSignIn","finishLoading","connectSocket","expiresIn","autoLogin","path","component","CreateTask","exact","EditTask","SignIn","SignUp","Tasks","App","Boolean","window","hostname","match","initialState","saveToLocalStorage","setItem","clearLocalStorage","clear","reducer","action","decoded","jwt","decode","exp","undefined","from","sort","a","b","io","close","reducers","combineReducers","authReducer","taskReducer","socketReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25600b99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleBlock\":\"TitleElement_titleBlock__3QuwQ\",\"titleText\":\"TitleElement_titleText__1oIzE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sharedBy\":\"TaskHeader_sharedBy__1Baap\",\"taskIcon\":\"TaskHeader_taskIcon__6hQY4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardText\":\"TaskItem_cardText__3Jmcz\",\"cardDiv\":\"TaskItem_cardDiv__eOSQK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerModal\":\"ModalSpinner_spinnerModal__2A3Hc\",\"spinner\":\"ModalSpinner_spinner__2eLjA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"NavigationLink_navLink__3b_Hy\",\"navLinkActive\":\"NavigationLink_navLinkActive__1AVDG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputElement_input__3ZUFV\"};","module.exports = __webpack_public_path__ + \"static/media/logo.cdc9dbf8.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitBtn\":\"SubmitButton_submitBtn__1_DSK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"AlertMessage_alert__aOcKo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redirectLink\":\"SignIn_redirectLink__1X4aj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redirectLink\":\"SignUp_redirectLink__3bMHW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardBottomText\":\"TaskFooter_cardBottomText__3VU_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardTitle\":\"TaskTitle_cardTitle__t5FXl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsBlock\":\"CreateTask_inputsBlock__1n_OZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsBlock\":\"EditTask_inputsBlock__28U0M\"};","module.exports = __webpack_public_path__ + \"static/media/logo-invert.31eef98b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandLink\":\"NavigationBrand_brandLink__hYzgZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoutBtn\":\"LogoutButton_logoutBtn__1zfPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"TaskComponents_label__2xFCB\",\"createTaskLabel\":\"TaskComponents_createTaskLabel__ec2Zz\",\"listItem\":\"TaskComponents_listItem__AqF4P\",\"manageItems\":\"TaskComponents_manageItems__380Wp\",\"addItem\":\"TaskComponents_addItem__3Hf7U\",\"removeItem\":\"TaskComponents_removeItem__ULSkI\",\"button\":\"TaskComponents_button__4o4QR\"};","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport classes from './InputElement.module.css';\r\n\r\nconst InputElement = (props) => {\r\n    return (\r\n        <Form.Group className={classes.input}>\r\n            <Form.Label>{props.label}</Form.Label>\r\n            <Form.Control\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={props.onInput}\r\n                value={props.value}\r\n                isInvalid={props.error} />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n                {props.helperText}\r\n            </Form.Control.Feedback>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default InputElement;\r\n","import React from 'react';\r\nimport Logo from '../../../../assets/images/logo.png';\r\n\r\nimport classes from './TitleElement.module.css';\r\n\r\nconst TitleElement = (props) => {\r\n    return (\r\n        <div className={classes.titleBlock}>\r\n            <div>\r\n                <img src={Logo} alt={'Logo'} height='70' />\r\n            </div>\r\n            <div className={classes.titleText}>{props.children}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TitleElement;\r\n","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst RememberMe = (props) => {\r\n    return (\r\n        <Form.Group>\r\n            <Form.Check\r\n                id={'custom-checkbox'}\r\n                type=\"checkbox\"\r\n                label=\"Remember me\"\r\n                onChange={props.onChange}\r\n                custom />\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default RememberMe;\r\n","import React from 'react'\r\nimport { Button, Spinner } from 'react-bootstrap';\r\n\r\nimport classes from './SubmitButton.module.css';\r\n\r\nconst SubmitButton = (props) => {\r\n    let spinner = null;\r\n    if (props.startAuth) {\r\n        spinner = (\r\n            <Spinner\r\n                as=\"span\"\r\n                animation=\"border\"\r\n                size=\"sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            variant=\"primary\"\r\n            type=\"submit\"\r\n            className={classes.submitBtn}\r\n            onClick={props.onClick}\r\n            disabled={props.startAuth || props.disabled}>\r\n            {props.text} {spinner}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nimport classes from './AlertMessage.module.css';\r\n\r\nconst AlertMessage = (props) => {\r\n    if (props.result.message) {\r\n        return (\r\n            <Alert\r\n                className={classes.alert}\r\n                variant={props.result.error ? 'danger' : 'success'}\r\n                onClose={props.hideAlert ? props.hideAlert : () => { }}\r\n                dismissible={props.hideAlert}\r\n            >\r\n                <p style={{ margin: '0' }}>{props.result.message}</p>\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default AlertMessage;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://immense-lake-83365.herokuapp.com/'\r\n});\r\n\r\nexport default instance;\r\n","import axios from '../../utility/axios-instance';\r\n\r\nimport * as actionTypes from './actionTypes';\r\n\r\nconst errorActionCreator = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_ERROR,\r\n        err: error\r\n    }\r\n}\r\n\r\nexport const startActionCreator = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const finishLoadingActionCreator = () => {\r\n    return {\r\n        type: actionTypes.LOAD_FINISH\r\n    }\r\n}\r\n\r\nexport const loginActionCreator = (token, rememberData) => {\r\n    return {\r\n        type: actionTypes.LOGIN,\r\n        token: token,\r\n        remember: rememberData\r\n    }\r\n}\r\n\r\nexport const signInLocalActionCreator = () => {\r\n    return {\r\n        type: actionTypes.SIGN_IN_LOCALY\r\n    }\r\n}\r\n\r\nexport const refreshTokenActionCreator = (token) => {\r\n    return {\r\n        type: actionTypes.REFRESH_TOKEN,\r\n        token: token\r\n    }\r\n}\r\n\r\nexport const newTimeoutIdActionCreator = (timerId) => {\r\n    return {\r\n        type: actionTypes.RESET_TIMEOUT_ID,\r\n        id: timerId\r\n    }\r\n}\r\n\r\nexport const logoutActionCreator = () => {\r\n    return {\r\n        type: actionTypes.LOGOUT\r\n    }\r\n}\r\n\r\nexport const signInLocalAction = () => {\r\n    return dispatch => {\r\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('token');\r\n\r\n        dispatch(signInLocalActionCreator())\r\n        dispatch(resetTokenTimer());\r\n    }\r\n}\r\n\r\nexport const signUpAction = (user, rememberData) => {\r\n    return dispatch => {\r\n        dispatch(startActionCreator());\r\n\r\n        axios.post('/user/signup', user)\r\n            .then(token => {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + token.data;\r\n\r\n                dispatch(loginActionCreator(token, rememberData));\r\n                dispatch(resetTokenTimer());\r\n            })\r\n            .catch(err => {\r\n                dispatch(errorActionCreator(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const signInAction = (user, rememberData) => {\r\n    return dispatch => {\r\n        dispatch(startActionCreator());\r\n\r\n        axios.post('/user/signin', user)\r\n            .then(token => {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + token.data;\r\n\r\n                dispatch(loginActionCreator(token, rememberData));\r\n                dispatch(resetTokenTimer());\r\n            })\r\n            .catch(err => {\r\n                dispatch(errorActionCreator(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const resetTokenTimer = () => { //set token auto-refreshing\r\n    return (dispatch, getState) => {\r\n        clearTimeout(getState().auth.refreshTimerId);\r\n\r\n        let delay = (getState().auth.expirationTime - Math.floor((new Date().getTime() / 1000))) * 1000 - 30 * 1000;\r\n\r\n        if (delay < 0) delay = 15 * 1000;\r\n\r\n        const timerId = setTimeout(\r\n            () => {\r\n                const token = {\r\n                    token: getState().auth.token\r\n                }\r\n\r\n                try {\r\n                    dispatch(refreshTokenAction(token));\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }, delay\r\n        );\r\n        dispatch(newTimeoutIdActionCreator(timerId));\r\n    }\r\n}\r\n\r\nexport const refreshTokenAction = (token) => {\r\n    return (dispatch, getState) => {\r\n        axios.post('/user/refresh-token', token)\r\n            .then(newToken => {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + newToken.data;\r\n\r\n                dispatch(refreshTokenActionCreator(newToken)); //refreshing token\r\n\r\n                if (!getState().auth.id) dispatch(signInLocalAction()); //if user is not auth we try to login auto\r\n                else dispatch(resetTokenTimer());\r\n            })\r\n            .catch(err => {\r\n                dispatch(errorActionCreator(err));\r\n                dispatch(logoutActionCreator());\r\n            });\r\n    }\r\n}\r\n\r\n","//authorization\r\nexport const LOGIN = 'LOGIN';\r\nexport const SIGN_IN_LOCALY = 'SIGN_IN_LOCALY';\r\nexport const LOAD_FINISH = 'LOAD_FINISH';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const AUTH_START = 'AUTH_START';\r\nexport const REFRESH_TOKEN = 'REFRESH_TOKEN';\r\nexport const RESET_TIMEOUT_ID = 'RESET_TIMEOUT_ID';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\n//tasks\r\nexport const FETCH_START = 'FETCH_START';\r\nexport const FETCH_TASKS = 'FETCH_TASKS';\r\nexport const RECIVE_TASK = 'RECIVE_TASK';\r\nexport const CLEAR_TASKS = 'CLEAR_TASKS';\r\nexport const LEAVE_TASK = 'LEAVE_TASK';\r\n\r\n//socket.io\r\nexport const CONNECT_SOCKET = 'CONNECT_SOCKET';\r\nexport const DISCONNECT_SOCKET = 'DISCONNECT_SOCKET';\r\n\r\n","const changeValidationMessage = (isValid, message, currMessage) => {\r\n    if (!isValid && currMessage.length === 0) return message;\r\n    return currMessage;\r\n}\r\n\r\nexport const validation = (string, validationRules, originalEmail) => {\r\n    let isValid = true;\r\n    let validationMessage = '';\r\n\r\n    if (validationRules.isRequred && isValid) {\r\n        isValid = string.length > 0 && isValid;\r\n        validationMessage = changeValidationMessage(isValid, 'Please, fill this field', validationMessage);\r\n    }\r\n\r\n    if (validationRules.isEmail && isValid) {\r\n        const exp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        isValid = exp.test(string) && isValid;\r\n        validationMessage = changeValidationMessage(isValid, 'Email is incorrect', validationMessage);\r\n    }\r\n\r\n    if (validationRules.minLength && isValid) {\r\n        isValid = string.length > 5 && isValid;\r\n        validationMessage = changeValidationMessage(isValid, 'Min password length is 6 symbols', validationMessage);\r\n    }\r\n\r\n    if (validationRules.maxLength && isValid) {\r\n        isValid = string.length < validationRules.maxLength && isValid;\r\n        validationMessage = changeValidationMessage(isValid, 'Max length is ' + validationRules.maxLength + ' symbols', validationMessage);\r\n    }\r\n\r\n    if (validationRules.shoudBeEqual && isValid) {\r\n        isValid = string === originalEmail && isValid;\r\n        validationMessage = changeValidationMessage(isValid, 'Emails don\\'t match', validationMessage);\r\n    }\r\n\r\n    return [isValid, validationMessage];\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Form, Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nimport InputElement from '../AuthElements/InputElement/InputElement';\r\nimport TitleElement from '../AuthElements/TitleElement/TitleElement';\r\nimport RememberMe from '../AuthElements/RememberMe/RememberMe';\r\nimport SubmitButton from '../AuthElements/SubmitButton/SubmitButton';\r\nimport AlertMessage from '../../UI/AlertMessage/AlertMessage';\r\nimport { signInAction } from '../../../store/actions/authorization';\r\nimport { validation } from '../../../utility/validation';\r\nimport classes from './SignIn.module.css';\r\n\r\nconst SignIn = (props) => {\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n    const [stateInputs, setStateInputs] = useState({\r\n        email: {\r\n            config: {\r\n                label: 'Email address',\r\n                type: 'email',\r\n                placeholder: 'Enter email',\r\n            },\r\n            validationRules: {\r\n                isRequred: true,\r\n                isEmail: true,\r\n            },\r\n            isValid: false,\r\n            validationMessage: '',\r\n            value: '',\r\n        },\r\n        password: {\r\n            config: {\r\n                label: 'Password',\r\n                type: 'password',\r\n                placeholder: 'Type password',\r\n            },\r\n            validationRules: {\r\n                isRequred: true,\r\n                minLength: true,\r\n            },\r\n            isValid: false,\r\n            validationMessage: '',\r\n            value: '',\r\n        },\r\n    });\r\n\r\n\r\n    if (props.email) return <Redirect to='/' />\r\n\r\n\r\n    const rememberCheckboxHandler = () => {\r\n        setRememberMe(prevState => {\r\n            return !prevState\r\n        })\r\n    }\r\n\r\n    const signInHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const userData = {\r\n            email: stateInputs.email.value,\r\n            password: stateInputs.password.value\r\n        };\r\n\r\n        props.onSignIn(userData, rememberMe);\r\n    }\r\n\r\n    const onInputHandler = (inputName, event) => {\r\n        const newValue = event.target.value;\r\n        const [currentValid, newValidationMessage] = validation(\r\n            newValue,\r\n            stateInputs[inputName].validationRules,\r\n            stateInputs.email.value\r\n        );\r\n\r\n        setStateInputs(prevState => ({\r\n            ...prevState,\r\n            [inputName]: {\r\n                ...prevState[inputName],\r\n                value: newValue,\r\n                isValid: currentValid,\r\n                validationMessage: newValidationMessage\r\n            }\r\n        }));\r\n    }\r\n\r\n    let inputs = [];\r\n    let fieldsIsValid = true;\r\n\r\n    for (let key in stateInputs) {\r\n        inputs.push(\r\n            <InputElement\r\n                key={key}\r\n                label={stateInputs[key].config.label}\r\n                type={stateInputs[key].config.type}\r\n                placeholder={stateInputs[key].config.placeholder}\r\n                value={stateInputs[key].value}\r\n                onInput={onInputHandler.bind(this, key)}\r\n                error={!stateInputs[key].isValid && stateInputs[key].value.length > 0}\r\n                helperText={stateInputs[key].validationMessage}\r\n            />\r\n        );\r\n\r\n        fieldsIsValid = stateInputs[key].isValid && fieldsIsValid;\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col sm={1} md={4}></Col>\r\n                <Col sm={10} md={4}>\r\n                    <TitleElement>Sign In</TitleElement>\r\n\r\n                    <Form>\r\n                        {inputs}\r\n\r\n                        <AlertMessage result={{ message: props.errorMessage, error: true }} />\r\n\r\n                        <RememberMe onChange={rememberCheckboxHandler} />\r\n                        <SubmitButton\r\n                            text={'Sign In'}\r\n                            disabled={!fieldsIsValid}\r\n                            startAuth={props.authStart}\r\n                            onClick={signInHandler} />\r\n\r\n                        <Link to=\"/sign-up\" className={classes.redirectLink}>Don't have an account? Sign Up</Link>\r\n                    </Form>\r\n                </Col>\r\n                <Col sm={1} md={4}></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        email: state.auth.email,\r\n        authStart: state.auth.authStart\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSignIn: (userData, rememberMe) => dispatch(signInAction(userData, rememberMe)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Form, Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport axios from '../../../utility/axios-instance';\r\nimport InputElement from '../AuthElements/InputElement/InputElement';\r\nimport TitleElement from '../AuthElements/TitleElement/TitleElement';\r\nimport RememberMe from '../AuthElements/RememberMe/RememberMe';\r\nimport SubmitButton from '../AuthElements/SubmitButton/SubmitButton';\r\nimport AlertMessage from '../../UI/AlertMessage/AlertMessage';\r\nimport { signUpAction } from '../../../store/actions/authorization';\r\nimport { validation } from '../../../utility/validation';\r\nimport classes from './SignUp.module.css';\r\n\r\nconst SignUp = (props) => {\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n    const [emailIsCorrect, setEmailIsCorrect] = useState(false);\r\n    const [emailTimeoutId, setEmailTimeoutId] = useState(null);\r\n\r\n    const [stateInputs, setStateInputs] = useState({\r\n        email: {\r\n            config: {\r\n                label: 'Email address',\r\n                type: 'email',\r\n                placeholder: 'Enter email',\r\n            },\r\n            validationRules: {\r\n                isRequred: true,\r\n                isEmail: true,\r\n            },\r\n            isValid: false,\r\n            validationMessage: '',\r\n            value: '',\r\n        },\r\n        emailConfirm: {\r\n            config: {\r\n                label: 'Confirm email address',\r\n                type: 'email',\r\n                placeholder: 'Enter email',\r\n            },\r\n            validationRules: {\r\n                isRequred: true,\r\n                shoudBeEqual: true,\r\n            },\r\n            isValid: false,\r\n            validationMessage: '',\r\n            value: '',\r\n        },\r\n        password: {\r\n            config: {\r\n                label: 'Password',\r\n                type: 'password',\r\n                placeholder: 'Type password',\r\n            },\r\n            validationRules: {\r\n                isRequred: true,\r\n                minLength: true,\r\n            },\r\n            isValid: false,\r\n            validationMessage: '',\r\n            value: '',\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        clearTimeout(emailTimeoutId);\r\n\r\n        if (!emailIsCorrect) return;\r\n\r\n        const timeoutId = setTimeout(() => {\r\n            const data = {\r\n                email: stateInputs.email.value\r\n            }\r\n\r\n            axios.post('/user/email-exists', data)\r\n                .then(response => {\r\n                    if (response.data) {\r\n                        setStateInputs(prevState => ({\r\n                            ...prevState,\r\n                            email: {\r\n                                ...prevState.email,\r\n                                isValid: false,\r\n                                validationMessage: 'Email already exist',\r\n                            }\r\n                        }))\r\n                    }\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n        }, 800);\r\n        setEmailTimeoutId(timeoutId);\r\n    }, [stateInputs.email.value]);\r\n\r\n\r\n    if (props.email) return <Redirect to='/' />\r\n\r\n\r\n    const rememberCheckboxHandler = () => {\r\n        setRememberMe(prevState => {\r\n            return !prevState\r\n        })\r\n    }\r\n\r\n    const signUpHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newUser = {\r\n            email: stateInputs.email.value,\r\n            password: stateInputs.password.value\r\n        };\r\n\r\n        props.onSignUp(newUser, rememberMe);\r\n    }\r\n\r\n    const onInputHandler = (inputName, event) => {\r\n        const newValue = event.target.value;\r\n        const [currentValid, newValidationMessage] = validation(\r\n            newValue,\r\n            stateInputs[inputName].validationRules,\r\n            stateInputs.email.value\r\n        );\r\n\r\n        checkEmailIsCorrect(inputName, currentValid);\r\n\r\n        setStateInputs(prevState => ({\r\n            ...prevState,\r\n            [inputName]: {\r\n                ...prevState[inputName],\r\n                value: newValue,\r\n                isValid: currentValid,\r\n                validationMessage: newValidationMessage\r\n            }\r\n        }));\r\n    }\r\n\r\n    const checkEmailIsCorrect = (inputName, isValid) => {\r\n        if (inputName === 'email') setEmailIsCorrect(isValid);\r\n    }\r\n\r\n    let inputs = [];\r\n    let fieldsIsValid = true;\r\n\r\n    for (let key in stateInputs) {\r\n        inputs.push(\r\n            <InputElement\r\n                key={key}\r\n                label={stateInputs[key].config.label}\r\n                type={stateInputs[key].config.type}\r\n                placeholder={stateInputs[key].config.placeholder}\r\n                value={stateInputs[key].value}\r\n                onInput={onInputHandler.bind(this, key)}\r\n                error={!stateInputs[key].isValid && stateInputs[key].value.length > 0}\r\n                helperText={stateInputs[key].validationMessage}\r\n            />\r\n        );\r\n\r\n        fieldsIsValid = stateInputs[key].isValid && fieldsIsValid;\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col sm={1} md={4}></Col>\r\n                <Col sm={10} md={4}>\r\n                    <TitleElement>Sign Up</TitleElement>\r\n\r\n                    <Form>\r\n                        {inputs}\r\n\r\n                        <AlertMessage result={{ message: props.errorMessage, error: true }} />\r\n\r\n                        <RememberMe onChange={rememberCheckboxHandler} />\r\n                        <SubmitButton\r\n                            text={'Sign Up'}\r\n                            disabled={!fieldsIsValid}\r\n                            startAuth={props.authStart}\r\n                            onClick={signUpHandler} />\r\n\r\n                        <Link to=\"/sign-in\" className={classes.redirectLink}>Already have an account? Sign in</Link>\r\n                    </Form>\r\n                </Col>\r\n                <Col sm={1} md={4}></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        email: state.auth.email,\r\n        authStart: state.auth.authStart\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSignUp: (newUser, rememberMe) => dispatch(signUpAction(newUser, rememberMe)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n","import React from 'react'\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDoorOpen, faEllipsisV, faShareSquare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport classes from './TaskMenu.module.css';\r\n\r\nconst TaskMenu = (props) => {\r\n    const clickHandler = (func, event) => {\r\n        event.stopPropagation();\r\n        func();\r\n    }\r\n\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={'focus'}\r\n            delay={100}\r\n            rootCloseEvent={'click'}\r\n            placement={'bottom'}\r\n            overlay={\r\n                <Popover>\r\n                    <Popover.Content className={classes.popoverBody}>\r\n                        <div\r\n                            className={classes.popoverItem}\r\n                            onClick={clickHandler.bind(this, props.openShareTaskModal)}>\r\n                            <FontAwesomeIcon className={classes.leaveIcon} icon={faShareSquare} /> Share task\r\n                        </div>\r\n                        <hr></hr>\r\n                        <div\r\n                            className={classes.popoverItem}\r\n                            onClick={clickHandler.bind(this, props.openLeaveTaskModal)}>\r\n                            <FontAwesomeIcon className={classes.leaveIcon} icon={faDoorOpen} /> Leve task\r\n                        </div>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            }\r\n        >\r\n            <button className={classes.leaveIcon}><FontAwesomeIcon icon={faEllipsisV} /></button>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport default TaskMenu;\r\n","import React from 'react';\r\nimport { Card, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTasks } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport TaskMenu from './TaskMenu/TaskMenu';\r\nimport classes from './TaskHeader.module.css';\r\n\r\nconst TaskHeader = (props) => {\r\n    const taskSharedBy = props.sender || 'Task Author';\r\n\r\n    return (\r\n        <Card.Header>\r\n            <FontAwesomeIcon className={classes.taskIcon} icon={faTasks} />\r\n            <OverlayTrigger\r\n                placement={'top'}\r\n                overlay={\r\n                    <Tooltip>{props.sender ? 'This user share you this task' : 'You created this task'}</Tooltip>\r\n                }\r\n            >\r\n                <p className={classes.sharedBy}>{taskSharedBy}</p>\r\n            </OverlayTrigger>\r\n            <TaskMenu\r\n                openShareTaskModal={props.openShareTaskModal}\r\n                openLeaveTaskModal={props.openLeaveTaskModal} />\r\n        </Card.Header>\r\n    )\r\n}\r\n\r\nexport default TaskHeader;\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalendarDay, faCalendarPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport classes from './TaskFooter.module.css';\r\n\r\nconst TaskFooter = ({ lastUpdateDate, createDate }) => {\r\n    return (\r\n        <div className={classes.cardBottomText}>\r\n            <div>\r\n                <FontAwesomeIcon icon={faCalendarDay} /> {new Date(lastUpdateDate * 1000).toLocaleString()}\r\n            </div>\r\n            <div>\r\n                <FontAwesomeIcon icon={faCalendarPlus} /> {new Date(createDate * 1000).toLocaleDateString()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskFooter;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nimport classes from './TaskTitle.module.css';\r\n\r\nconst TaskTitle = ({ id, title }) => {\r\n    return (\r\n        <Card.Title className={classes.cardTitle}>\r\n            <Link to={{\r\n                pathname: '/edit-task',\r\n                state: { taskId: id }\r\n            }}>\r\n                {title}\r\n            </Link>\r\n        </Card.Title >\r\n\r\n    )\r\n}\r\n\r\nexport default TaskTitle;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nimport TaskHeader from './TaskHeader/TaskHeader';\r\nimport TaskFooter from './TaskFooter/TaskFooter';\r\nimport TaskTitle from './TaskTitle/TaskTitle';\r\nimport classes from './TaskItem.module.css';\r\n\r\nconst TaskItem = (props) => {\r\n    return (\r\n        <Card className={classes.cardDiv} bg={'light'} text={'dark'}>\r\n            <TaskHeader\r\n                sender={props.task.sender}\r\n                openShareTaskModal={props.openShareTaskModal}\r\n                openLeaveTaskModal={props.openLeaveTaskModal} />\r\n            <Card.Body>\r\n                <TaskTitle id={props.task._id} title={props.task.title} />\r\n                <Card.Text className={classes.cardText}>{props.task.description}</Card.Text>\r\n                <TaskFooter lastUpdateDate={props.task.lastUpdateDate} createDate={props.task.date} />\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default TaskItem;\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nimport classes from './ModalSpinner.module.css';\r\n\r\nconst ModalSpinner = () => {\r\n    return (\r\n        <div className={classes.spinnerModal}>\r\n            <div className={classes.spinner}>\r\n                <Spinner\r\n                    animation=\"border\"\r\n                    variant={'primary'} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalSpinner;\r\n","import React, { useState } from 'react';\r\nimport { Button, FormControl, Modal } from 'react-bootstrap';\r\n\r\nconst ModalPrompt = (props) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const inputChangeHandler = (event) => {\r\n        const newValue = event.target.value;\r\n        setInputValue(newValue);\r\n    }\r\n\r\n    const modalCloseHandler = () => {\r\n        props.hideModal();\r\n        setInputValue('');\r\n    }\r\n\r\n    const confirmHandler = () => {\r\n        props.onConfirm(inputValue);\r\n        modalCloseHandler();\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal show={props.show} onHide={modalCloseHandler}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{props.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <FormControl\r\n                        value={inputValue}\r\n                        placeholder={props.placeholder}\r\n                        onChange={inputChangeHandler} />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={modalCloseHandler}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={confirmHandler}>Confirm</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ModalPrompt;\r\n","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst ModalConfirm = (props) => {\r\n    const confirmHandler = () => {\r\n        props.onConfirm();\r\n        props.hideModal();\r\n    }\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.hideModal}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.title}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.hideModal}>Cancel</Button>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    onClick={confirmHandler}>Confirm</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalConfirm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport axios from '../../utility/axios-instance';\r\nimport TaskItem from './TaskItem/TaskItem';\r\nimport ModalSpinner from '../UI/Modals/ModalSpinner/ModalSpinner';\r\nimport ModalPrompt from '../UI/Modals/ModalPrompt/ModalPrompt';\r\nimport ModalConfirm from '../UI/Modals/ModalConfirm/ModalConfirm';\r\nimport AlertMessage from '../UI/AlertMessage/AlertMessage';\r\nimport {\r\n    fetchTasksAction,\r\n    leaveTaskAction,\r\n    clearTasksActionCreator,\r\n    reciveTaskActionCreator\r\n} from '../../store/actions/tasks';\r\n\r\nconst Tasks = (props) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [shareModalOpen, setShareModalOpen] = useState(false);\r\n    const [leaveModalOpen, setLeaveModalOpen] = useState(false);\r\n    const [choosedTaskId, setChoosedTaskId] = useState();\r\n    const [shareResultAlert, setShareResultAlert] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (props.userId) {\r\n            props.fetchTasks(props.userId);\r\n            setLoading(false);\r\n\r\n            props.socket.on('recive-shared-task', (data) => {\r\n                console.log('revive task');\r\n                if (data.to === props.userEmail) props.reciveTask(data);\r\n            });\r\n        }\r\n        return () => {\r\n            props.socket.removeListener('recive-shared-task');\r\n            props.clearTasksList();\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!props.userId) return <Redirect to={'/sign-in'} />\r\n    if (props.fetching || loading) return <ModalSpinner />;\r\n\r\n\r\n    const openLeaveTaskModal = (taskId) => {\r\n        setLeaveModalOpen(true);\r\n        setChoosedTaskId(taskId);\r\n    }\r\n\r\n    const closeLeaveTaskModal = () => {\r\n        setLeaveModalOpen(false);\r\n        setChoosedTaskId();\r\n    }\r\n\r\n    const openShareTaskModal = (taskId) => {\r\n        setShareModalOpen(true);\r\n        setChoosedTaskId(taskId);\r\n    }\r\n\r\n    const closeShareTaskModal = () => {\r\n        setShareModalOpen(false);\r\n        setChoosedTaskId();\r\n    }\r\n\r\n    const handleError = (error) => {\r\n        setShareResultAlert({\r\n            message: error.response.data.message || 'Something went wrong. Please, try later...',\r\n            error: true\r\n        });\r\n    }\r\n\r\n    const shareTaskHandler = (reciverEmail) => {\r\n        setShareResultAlert({});\r\n\r\n        const taskData = {\r\n            email: reciverEmail,\r\n            senderId: props.userId,\r\n        }\r\n\r\n        axios.patch(`/task/share/${choosedTaskId}`, taskData)\r\n            .then(() => {\r\n                setShareResultAlert({\r\n                    message: 'Task sent successfully',\r\n                    error: false\r\n                })\r\n\r\n                const sharedTask = props.tasks.find(task => task._id === choosedTaskId);\r\n\r\n                props.socket.emit('share-task', props.userEmail, reciverEmail, sharedTask);  // (event, from, to, data) \r\n            })\r\n            .catch(error => {\r\n                handleError(error);\r\n            })\r\n    }\r\n\r\n    const clearShareAlert = () => {\r\n        setShareResultAlert({});\r\n    }\r\n\r\n    const leaveTask = () => {\r\n        const data = {\r\n            userId: props.userId\r\n        }\r\n\r\n        props.leaveTask(choosedTaskId, data);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <ModalPrompt                // Modal for sharing task\r\n                show={shareModalOpen}\r\n                title={'Share the task'}\r\n                placeholder={'Email'}\r\n                hideModal={closeShareTaskModal}\r\n                onConfirm={shareTaskHandler} />\r\n\r\n            <ModalConfirm               // Modal for leaving task\r\n                show={leaveModalOpen}\r\n                title={'Leave this task?'}\r\n                hideModal={closeLeaveTaskModal}\r\n                onConfirm={leaveTask} />\r\n\r\n            <AlertMessage                // Alert for report about the results of task sharing\r\n                result={shareResultAlert}\r\n                hideAlert={clearShareAlert} />\r\n\r\n            <Row>\r\n                {\r\n                    props.tasks.map(task => {\r\n                        return (\r\n                            <Col sm={6} md={4} lg={3} className={'mb-3'} key={task._id}>\r\n                                <TaskItem\r\n                                    task={task}\r\n                                    openShareTaskModal={openShareTaskModal.bind(this, task._id)}\r\n                                    openLeaveTaskModal={openLeaveTaskModal.bind(this, task._id)} />\r\n                            </Col>\r\n                        )\r\n                    })\r\n                }\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        fetching: state.task.fetching,\r\n        tasks: state.task.tasks,\r\n        userId: state.auth.id,\r\n        userEmail: state.auth.email,\r\n        socket: state.sckt.socket,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchTasks: (userId) => { dispatch(fetchTasksAction(userId)) },\r\n        clearTasksList: () => { dispatch(clearTasksActionCreator()) },\r\n        reciveTask: (data) => { dispatch(reciveTaskActionCreator(data)) },\r\n        leaveTask: (taskId, data) => { dispatch(leaveTaskAction(taskId, data)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n","import axios from '../../utility/axios-instance';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const startFetchingActionCreator = () => {\r\n    return {\r\n        type: actionTypes.FETCH_START,\r\n    }\r\n}\r\n\r\nexport const fetchTasksActionCreator = (tasks) => {\r\n    return {\r\n        type: actionTypes.FETCH_TASKS,\r\n        tasks,\r\n    }\r\n}\r\n\r\nexport const reciveTaskActionCreator = (data) => {\r\n    return {\r\n        type: actionTypes.RECIVE_TASK,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const clearTasksActionCreator = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_TASKS,\r\n    }\r\n}\r\n\r\nexport const leaveTaskActionCreator = (taskId) => {\r\n    return {\r\n        type: actionTypes.LEAVE_TASK,\r\n        taskId,\r\n    }\r\n}\r\n\r\nexport const fetchTasksAction = (userId) => {\r\n    return dispatch => {\r\n        dispatch(startFetchingActionCreator());\r\n        axios.get(`/task/list/${userId}`)\r\n            .then(tasks => {\r\n                dispatch(fetchTasksActionCreator(tasks.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const leaveTaskAction = (taskId, data) => {\r\n    return dispatch => {\r\n        axios.patch(`/task/leave/${taskId}`, data)\r\n            .then(() => {\r\n                dispatch(leaveTaskActionCreator(taskId))\r\n            })\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\nimport classes from '../TaskComponents.module.css';\r\n\r\nconst TaskTitle = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h3 className={classes.createTaskLabel}>{props.mainTitle}</h3>\r\n            <h4 className={classes.label}>Title</h4>\r\n            <FormControl\r\n                value={props.value}\r\n                placeholder={'Type task title'}\r\n                onChange={props.onChange.bind(this, 'title')} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TaskTitle;\r\n","import React from 'react';\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\nimport classes from '../TaskComponents.module.css';\r\n\r\nconst Description = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h4 className={classes.label}>Description</h4>\r\n            <FormControl\r\n                as={'textarea'}\r\n                value={props.value}\r\n                placeholder={'Type task description'}\r\n                onChange={props.onChange.bind(this, 'description')} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Description;\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst InstructionsAction = (props) => {\r\n    return (\r\n        <div\r\n            className={props.actionClass}\r\n            onClick={props.onClick}\r\n        >\r\n            <FontAwesomeIcon icon={props.icon} />\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InstructionsAction;\r\n","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { faPlusCircle, faMinusCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport ItemsAction from './Action/Action';\r\nimport classes from '../../TaskComponents.module.css';\r\n\r\nconst InsctructionsActions = (props) => {\r\n    return (\r\n        <ListGroup.Item>\r\n            <div className={classes.manageItems}>\r\n                <ItemsAction\r\n                    actionClass={classes.addItem}\r\n                    icon={faPlusCircle}\r\n                    text={' Add one'}\r\n                    onClick={props.onAdd} />\r\n\r\n                <ItemsAction\r\n                    actionClass={classes.removeItem}\r\n                    icon={faMinusCircle}\r\n                    text={' Remove one'}\r\n                    onClick={props.onRemove} />\r\n            </div>\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default InsctructionsActions;\r\n","import React from 'react';\r\nimport { ListGroup, Badge, FormControl } from 'react-bootstrap';\r\n\r\nimport classes from '../../TaskComponents.module.css';\r\n\r\nconst Instruction = (props) => {\r\n    return (\r\n        <ListGroup.Item className={classes.listItem}>\r\n            <Badge pill variant={'primary'}>{props.number}</Badge>\r\n            <FormControl\r\n                placeholder={'Type your instruction here'}\r\n                value={props.text}\r\n                onChange={props.onChange} />\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default Instruction;\r\n","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nimport Actions from './Actions/Actions';\r\nimport Instruction from './Inctruction/Instruction';\r\nimport classes from '../TaskComponents.module.css';\r\n\r\nconst Instrcutions = (props) => {\r\n    return (\r\n        <div className={'recipeChunk'}>\r\n            <h4 className={classes.label}>Instrcutions</h4>\r\n            <ListGroup>\r\n                <Actions\r\n                    onAdd={props.onAdd.bind(this, props.type)}\r\n                    onRemove={props.onRemove.bind(this, props.type)} />\r\n                {\r\n                    props.items.map((item, index) => {\r\n                        return (\r\n                            <Instruction\r\n                                key={index}\r\n                                text={item}\r\n                                number={index + 1}\r\n                                onChange={props.onChange.bind(this, index, props.type)} />\r\n                        )\r\n                    })\r\n                }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instrcutions;\r\n","import React from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\n\r\nimport classes from '../TaskComponents.module.css';\r\n\r\nconst TaskButton = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                className={classes.button}\r\n                disabled={props.loading}\r\n                onClick={props.onClick}\r\n            >\r\n                {props.label}\r\n                {props.loading ? <Spinner size=\"sm\" animation={'border'} variant={'light'} /> : null}\r\n            </Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TaskButton;\r\n","import React from 'react';\r\nimport { Col } from 'react-bootstrap';\r\n\r\nconst ColHOC = (props) => {\r\n    return (\r\n        <>\r\n            <Col sm={1} md={2}></Col>\r\n            <Col sm={10} md={8}>\r\n                {props.children}\r\n            </Col>\r\n            <Col sm={1} md={2}></Col>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ColHOC;\r\n","import React, { useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from '../../../utility/axios-instance';\r\nimport Title from '../TaskComponents/Title/Title';\r\nimport Description from '../TaskComponents/Description/Description';\r\nimport Instructions from '../TaskComponents/Instructions/Instructions';\r\nimport Button from '../TaskComponents/Button/Button';\r\nimport ColHOC from '../../UI/ColHOC/ColHOC';\r\nimport AlertMessage from '../../UI/AlertMessage/AlertMessage';\r\nimport classes from './CreateTask.module.css';\r\n\r\nconst CreateTask = (props) => {\r\n    const [task, setTask] = useState({\r\n        title: '',\r\n        description: '',\r\n        instructions: [],\r\n    })\r\n\r\n    const [savingTask, setSavingTask] = useState(false);\r\n    const [resultMessage, setResultMessage] = useState({});\r\n\r\n    if (!props.userId) return <Redirect to={'/sign-in'} />\r\n\r\n    const onAddInstructionHandler = () => {\r\n        setTask(prevTask => {\r\n            const newItems = [...prevTask.instructions];\r\n            newItems.push('');\r\n\r\n            return {\r\n                ...prevTask,\r\n                instructions: [...newItems]\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const onRemoveInstructionHandler = (item) => {\r\n        setTask(prevTask => {\r\n            const newItems = [...prevTask.instructions];\r\n            newItems.pop();\r\n\r\n            return {\r\n                ...prevTask,\r\n                instructions: [...newItems]\r\n            }\r\n        })\r\n    }\r\n\r\n    const onTextChangeHandler = (item, event) => {\r\n        const newValue = event.target.value;\r\n        setTask(prevTask => ({\r\n            ...prevTask,\r\n            [item]: newValue,\r\n        }))\r\n    }\r\n\r\n    const onChangeInstrcutionHandler = (index, item, event) => {\r\n        const newInstrcutionValue = event.target.value;\r\n        setTask(prevTask => {\r\n            const newItems = [...prevTask.instructions];\r\n            newItems[index] = newInstrcutionValue;\r\n\r\n            return {\r\n                ...prevTask,\r\n                instructions: [...newItems]\r\n            }\r\n        })\r\n    }\r\n\r\n    const hideAlert = () => {\r\n        setResultMessage({});\r\n    }\r\n\r\n    const validateTask = () => {\r\n        let isValid = true;\r\n\r\n        for (let key in task) {\r\n            if (key === 'instructions') {\r\n                const arr = clearArray(task[key]);\r\n                isValid = arr.length > 0 && isValid;\r\n            } else {\r\n                isValid = task[key].length > 0 && isValid;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    const clearArray = (arr) => {\r\n        return arr.filter(item => item.trim().length > 0);\r\n    }\r\n\r\n    const formTask = () => {\r\n        const date = Math.floor((new Date().getTime() / 1000));\r\n\r\n        let taskData = {\r\n            title: task.title,\r\n            description: task.description,\r\n            instructions: clearArray(task.instructions),\r\n            ownerId: props.userId,\r\n            date,\r\n        }\r\n\r\n        return taskData;\r\n    }\r\n\r\n    const createRecipeHandler = () => {\r\n        if (!validateTask()) {\r\n            setResultMessage({\r\n                message: 'Please fill all fields',\r\n                error: true,\r\n            });\r\n            return;\r\n        }\r\n\r\n        setSavingTask(true);\r\n        setResultMessage({});\r\n\r\n        const taskData = formTask();\r\n\r\n        axios.post('/task', taskData)\r\n            .then(() => {\r\n                props.history.push('/');\r\n            })\r\n            .catch(error => {\r\n                setSavingTask(false);\r\n                setResultMessage({\r\n                    message: 'Something went wrong...',\r\n                    error: true\r\n                })\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col sm={1} md={2} lg={3}></Col>\r\n                <Col sm={10} md={8} lg={6}>\r\n                    <Row className={classes.inputsBlock}>\r\n                        <ColHOC>\r\n                            <Title\r\n                                mainTitle={'Create Task'}\r\n                                value={task.title}\r\n                                onChange={onTextChangeHandler} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <Description\r\n                                value={task.description}\r\n                                onChange={onTextChangeHandler} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <Instructions\r\n                                items={task.instructions}\r\n                                onAdd={onAddInstructionHandler}\r\n                                onRemove={onRemoveInstructionHandler}\r\n                                onChange={onChangeInstrcutionHandler} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <AlertMessage result={resultMessage} hideAlert={hideAlert} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <Button\r\n                                label={'Create task '}\r\n                                loading={savingTask}\r\n                                onClick={createRecipeHandler} />\r\n                        </ColHOC>\r\n                    </Row>\r\n                </Col>\r\n                <Col sm={1} md={2} lg={3}></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userId: state.auth.id,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CreateTask);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from '../../../utility/axios-instance';\r\nimport Title from '../TaskComponents/Title/Title';\r\nimport Description from '../TaskComponents/Description/Description';\r\nimport Instructions from '../TaskComponents/Instructions/Instructions';\r\nimport ModalSpinner from '../../UI/Modals/ModalSpinner/ModalSpinner';\r\nimport Button from '../TaskComponents/Button/Button';\r\nimport ColHOC from '../../UI/ColHOC/ColHOC';\r\nimport AlertMessage from '../../UI/AlertMessage/AlertMessage';\r\nimport classes from './EditTask.module.css';\r\n\r\nconst EditTask = (props) => {\r\n    const [task, setTask] = useState({\r\n        id: null,\r\n        title: '',\r\n        description: '',\r\n        instructions: [],\r\n    })\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [savingTask, setSavingTask] = useState(false);\r\n    const [resultMessage, setResultMessage] = useState({});\r\n\r\n    useEffect(() => {\r\n        const taskId = props.location.state.taskId;\r\n\r\n        axios.get(`/task/${taskId}`)\r\n            .then(resTask => {\r\n                setTask({\r\n                    id: resTask.data._id,\r\n                    title: resTask.data.title,\r\n                    description: resTask.data.description,\r\n                    instructions: resTask.data.instructions,\r\n                })\r\n\r\n                setLoading(false);\r\n            })\r\n    }, [])\r\n\r\n\r\n    if (!props.userId) return <Redirect to={'/sign-in'} />\r\n    if (props.fetching || loading) return <ModalSpinner />;\r\n\r\n\r\n    const onAddInstructionHandler = () => {\r\n        setTask(prevTask => {\r\n            const newItems = [...prevTask.instructions];\r\n            newItems.push('');\r\n\r\n            return {\r\n                ...prevTask,\r\n                instructions: [...newItems]\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const onRemoveInstructionHandler = (item) => {\r\n        setTask(prevTask => {\r\n            const newItems = [...prevTask.instructions];\r\n            newItems.pop();\r\n\r\n            return {\r\n                ...prevTask,\r\n                instructions: [...newItems]\r\n            }\r\n        })\r\n    }\r\n\r\n    const onTextChangeHandler = (item, event) => {\r\n        const newValue = event.target.value;\r\n        setTask(prevTask => ({\r\n            ...prevTask,\r\n            [item]: newValue,\r\n        }))\r\n    }\r\n\r\n    const onChangeInstrcutionHandler = (index, item, event) => {\r\n        const newInstrcutionValue = event.target.value;\r\n        setTask(prevTask => {\r\n            const newItems = [...prevTask.instructions];\r\n            newItems[index] = newInstrcutionValue;\r\n\r\n            return {\r\n                ...prevTask,\r\n                instructions: [...newItems]\r\n            }\r\n        })\r\n    }\r\n\r\n    const hideAlert = () => {\r\n        setResultMessage({});\r\n    }\r\n\r\n    const validateTask = () => {\r\n        let isValid = true;\r\n\r\n        for (let key in task) {\r\n            if (key === 'instructions') {\r\n                const arr = clearArray(task[key]);\r\n                isValid = arr.length > 0 && isValid;\r\n            } else {\r\n                isValid = task[key].length > 0 && isValid;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    const clearArray = (arr) => {\r\n        return arr.filter(item => item.trim().length > 0);\r\n    }\r\n\r\n    const formTask = () => {\r\n        const date = Math.floor((new Date().getTime() / 1000));\r\n\r\n        let taskData = {\r\n            title: task.title,\r\n            description: task.description,\r\n            instructions: clearArray(task.instructions),\r\n            lastUpdateDate: date,\r\n        }\r\n\r\n        return taskData;\r\n    }\r\n\r\n    const editeRecipeHandler = () => {\r\n        if (!validateTask()) {\r\n            setResultMessage({\r\n                message: 'Please fill all fields',\r\n                error: true,\r\n            });\r\n            return;\r\n        }\r\n\r\n        setSavingTask(true);\r\n        setResultMessage({});\r\n\r\n        const taskData = formTask();\r\n\r\n        axios.patch(`/task/${task.id}`, taskData)\r\n            .then(() => {\r\n                setSavingTask(false);\r\n                setResultMessage({\r\n                    message: 'Changes saved successfully',\r\n                    error: false,\r\n                })\r\n            })\r\n            .catch(error => {\r\n                setSavingTask(false);\r\n                setResultMessage({\r\n                    message: 'Something went wrong...',\r\n                    error: true,\r\n                })\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col sm={1} md={2} lg={3}></Col>\r\n                <Col sm={10} md={8} lg={6}>\r\n                    <Row className={classes.inputsBlock}>\r\n                        <ColHOC>\r\n                            <Title\r\n                                mainTitle={'Edit Task'}\r\n                                value={task.title}\r\n                                onChange={onTextChangeHandler} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <Description\r\n                                value={task.description}\r\n                                onChange={onTextChangeHandler} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <Instructions\r\n                                items={task.instructions}\r\n                                onAdd={onAddInstructionHandler}\r\n                                onRemove={onRemoveInstructionHandler}\r\n                                onChange={onChangeInstrcutionHandler} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <AlertMessage result={resultMessage} hideAlert={hideAlert} />\r\n                        </ColHOC>\r\n\r\n                        <ColHOC>\r\n                            <Button\r\n                                label={'Update task '}\r\n                                loading={savingTask}\r\n                                onClick={editeRecipeHandler} />\r\n                        </ColHOC>\r\n                    </Row>\r\n                </Col>\r\n                <Col sm={1} md={2} lg={3}></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userId: state.auth.id,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(EditTask);\r\n","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Logo from '../../../../assets/images/logo-invert.png';\r\nimport classes from './NavigationBrand.module.css';\r\n\r\nconst NavigationBrand = () => {\r\n    return (\r\n        <Navbar.Brand>\r\n            <Link to=\"/\" className={classes.brandLink}>\r\n                <img\r\n                    alt=\"Logo\"\r\n                    src={Logo}\r\n                    height=\"45\"\r\n                    className=\"d-inline-block align-top\"\r\n                />{' '}\r\n                <div>Tasker</div>\r\n            </Link>\r\n        </Navbar.Brand>\r\n    )\r\n}\r\n\r\nexport default NavigationBrand;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport classes from './NavigationLink.module.css';\r\n\r\nconst NavigationLink = (props) => {\r\n    return (\r\n        <NavLink\r\n            to={props.to}\r\n            className={classes.navLink}\r\n            activeClassName={classes.navLinkActive}\r\n        >\r\n            {props.children}\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default NavigationLink;\r\n","import React from 'react';\r\n\r\nimport classes from './LogoutButton.module.css';\r\n\r\nconst LogoutButton = (props) => {\r\n    return (\r\n        <div\r\n            className={classes.logoutBtn}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogoutButton;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserPlus, faSignInAlt, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { logoutActionCreator } from '../../../../../store/actions/authorization';\r\nimport NavigationLink from '../NavigationLink/NavigationLink';\r\nimport LogoutButton from './LogoutButton/LogoutButton';\r\n\r\nexport const AuthLinks = (props) => {\r\n    if (props.userEmail) {\r\n        return (\r\n            <LogoutButton onClick={props.logout}>\r\n                <FontAwesomeIcon icon={faSignOutAlt} /> Logout\r\n            </LogoutButton>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavigationLink to=\"/sign-up\"><FontAwesomeIcon icon={faUserPlus} /> Sign Up</NavigationLink>\r\n            <NavigationLink to=\"/sign-in\"><FontAwesomeIcon icon={faSignInAlt} /> Sign In</NavigationLink>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userEmail: state.auth.email,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logout: () => { dispatch(logoutActionCreator()) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthLinks);\r\n","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NavigationLink from './NavigationLink/NavigationLink';\r\nimport AuthLinks from './AuthLinks/AuthLinks'; \r\n\r\nconst NavigationLinks = () => {\r\n    return (\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n                <NavigationLink to=\"/create-task\"><FontAwesomeIcon icon={faPlusSquare} /> Create task</NavigationLink>\r\n            </Nav>\r\n            <AuthLinks />\r\n        </Navbar.Collapse>\r\n    )\r\n}\r\n\r\nexport default NavigationLinks;\r\n","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nimport NavigationBrand from './NavigationBrand/NavigationBrand';\r\nimport NavigationLinks from './NavigationLinks/NavigationLinks';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <>\r\n            <Navbar collapseOnSelect className=\"shadow\" expand=\"lg\" bg=\"primary\" variant=\"light\" fixed=\"top\">\r\n                <NavigationBrand />\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <NavigationLinks />\r\n            </Navbar>\r\n            <div className={'empty'}></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport SignIn from '../Authorization/SignIn/SignIn';\r\nimport SignUp from '../Authorization/SignUp/SignUp';\r\nimport Tasks from '../Tasks/Tasks';\r\nimport CreateTask from '../Task/CreateTask/CreateTask';\r\nimport EditTask from '../Task/EditTask/EditTask';\r\nimport Navigation from '../UI/Navigation/Navigation';\r\nimport ModalSpinner from '../UI/Modals/ModalSpinner/ModalSpinner';\r\nimport { autoLogin } from '../../utility/auto-login';\r\nimport { signInLocalAction, refreshTokenAction } from '../../store/actions/authorization';\r\nimport { finishLoadingActionCreator } from '../../store/actions/authorization';\r\nimport { connectSocketActionCreator } from '../../store/actions/socket';\r\n\r\nconst Layout = (props) => {\r\n    useEffect(() => {\r\n        autoLogin(props.refreshTokenAndSignIn, props.signInByLocalData, props.finishLoading);\r\n        props.connectSocket();\r\n    }, [])\r\n\r\n    if (props.loading) return <ModalSpinner />;\r\n    return (\r\n        <React.Fragment>\r\n            <Navigation />\r\n            <Switch>\r\n                <Route path={'/create-task'} component={CreateTask} exact />\r\n                <Route path={'/edit-task'} component={EditTask} exact />\r\n                <Route path={'/sign-in'} component={SignIn} exact />\r\n                <Route path={'/sign-up'} component={SignUp} exact />\r\n                <Route path={'/'} component={Tasks} />\r\n            </Switch>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signInByLocalData: () => { dispatch(signInLocalAction()) },\r\n        refreshTokenAndSignIn: (token) => { dispatch(refreshTokenAction(token)) },\r\n        finishLoading: () => { dispatch(finishLoadingActionCreator()) },\r\n        connectSocket: () => { dispatch(connectSocketActionCreator()) },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport const connectSocketActionCreator = () => {\r\n    return {\r\n        type: actionTypes.CONNECT_SOCKET,\r\n    }\r\n}\r\n\r\nexport const disconnectSocketActionCreator = () => {\r\n    return {\r\n        type: actionTypes.DISCONNECT_SOCKET,\r\n    }\r\n}","export const autoLogin = (refreshTokenAndSignIn, signInByLocalData, finishLoading) => {\r\n    if (localStorage.getItem('token')) {\r\n        const expiresIn = localStorage.getItem('expirationTime') - 30;\r\n\r\n        if (+Math.floor((new Date().getTime() / 1000)) >= expiresIn) {\r\n            const token = {\r\n                token: localStorage.getItem('token')\r\n            }\r\n\r\n            refreshTokenAndSignIn(token);\r\n        } else {\r\n            signInByLocalData();\r\n        }\r\n    } else finishLoading();\r\n}\r\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Layout />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import jwt from 'jsonwebtoken';\r\n\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    token: null,\r\n    expirationTime: null,\r\n    errorMessage: null,\r\n    authStart: false,\r\n    refreshTimerId: null,\r\n    loading: true,\r\n}\r\n\r\nconst saveToLocalStorage = (data) => {\r\n    localStorage.setItem('id', data.id);\r\n    localStorage.setItem('email', data.email);\r\n    localStorage.setItem('token', data.token);\r\n    localStorage.setItem('expirationTime', data.expirationTime);\r\n}\r\n\r\nconst clearLocalStorage = () => {\r\n    localStorage.clear();\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_START: {\r\n            return {\r\n                errorMessage: null,\r\n                authStart: true,\r\n            }\r\n        }\r\n\r\n        case actionTypes.LOGIN: {\r\n            const decoded = jwt.decode(action.token.data);\r\n\r\n            const userData = {\r\n                id: decoded.id,\r\n                email: decoded.email,\r\n                token: action.token.data,\r\n                expirationTime: decoded.exp\r\n            }\r\n\r\n            if (action.remember) saveToLocalStorage(userData);\r\n\r\n            return { ...userData };\r\n        }\r\n\r\n        case actionTypes.LOAD_FINISH: {\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n        }\r\n\r\n        case actionTypes.AUTH_ERROR: {\r\n            if (action.err.response === undefined)\r\n                return {\r\n                    errorMessage: 'Service is unavailable. Please, try later...',\r\n                    authStart: false,\r\n                }\r\n            return {\r\n                errorMessage: action.err.response.data.message,\r\n                authStart: false,\r\n            }\r\n        }\r\n\r\n        case actionTypes.REFRESH_TOKEN: {\r\n            const decoded = jwt.decode(action.token.data);\r\n\r\n            const userData = {\r\n                id: decoded.id,\r\n                email: decoded.email,\r\n                token: action.token.data,\r\n                expirationTime: decoded.exp\r\n            }\r\n\r\n            saveToLocalStorage(userData);\r\n\r\n            return { ...userData };\r\n        }\r\n\r\n        case actionTypes.SIGN_IN_LOCALY: {\r\n            const userData = {\r\n                id: localStorage.getItem('id'),\r\n                email: localStorage.getItem('email'),\r\n                token: localStorage.getItem('token'),\r\n                expirationTime: localStorage.getItem('expirationTime')\r\n            }\r\n\r\n            return {\r\n                ...userData,\r\n                loading: false,\r\n            };\r\n        }\r\n\r\n        case actionTypes.RESET_TIMEOUT_ID: {\r\n            return {\r\n                ...state,\r\n                refreshTimerId: action.id\r\n            };\r\n        }\r\n\r\n        case actionTypes.LOGOUT: {\r\n            clearLocalStorage();\r\n\r\n            return {\r\n                ...initialState,\r\n                loading: false,\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    fetching: false,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_START: {\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            }\r\n        }\r\n\r\n        case actionTypes.FETCH_TASKS: {\r\n            return {\r\n                ...state,\r\n                fetching: false,\r\n                tasks: [...action.tasks]\r\n            }\r\n        }\r\n\r\n        case actionTypes.RECIVE_TASK: {\r\n            let { from, task } = action.data;\r\n            task.sender = from;\r\n\r\n            const tasks = [...state.tasks];\r\n            tasks.push(task);\r\n\r\n            tasks.sort((a, b) => {\r\n                if (a.lastUpdateDate > b.lastUpdateDate) return -1;\r\n                if (a.lastUpdateDate === b.lastUpdateDate) return 0;\r\n                return 1;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                tasks: [...tasks]\r\n            }\r\n        }\r\n\r\n        case actionTypes.CLEAR_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: [],\r\n            }\r\n        }\r\n\r\n        case actionTypes.LEAVE_TASK: {\r\n            const tasks = state.tasks.filter(task => task._id !== action.taskId);\r\n\r\n            return {\r\n                ...state,\r\n                tasks: [...tasks]\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import io from 'socket.io-client';\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    socket: null,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CONNECT_SOCKET: {\r\n            if (state.socket !== null) break;\r\n            const socket = io.connect('https://immense-lake-83365.herokuapp.com/');\r\n\r\n            return {\r\n                socket: socket,\r\n            }\r\n        }\r\n\r\n        case actionTypes.DISCONNECT_SOCKET: {\r\n            state.socket.close();\r\n\r\n            return { ...initialState }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport authReducer from './store/reducers/authorization';\nimport taskReducer from './store/reducers/tasks';\nimport socketReducer from './store/reducers/socket';\n\nconst reducers = combineReducers({\n  auth: authReducer,\n  task: taskReducer,\n  sckt: socketReducer,\n})\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaveIcon\":\"TaskMenu_leaveIcon__3uHT5\",\"popoverItem\":\"TaskMenu_popoverItem__3v8lD\",\"popoverBody\":\"TaskMenu_popoverBody__27R4h\"};"],"sourceRoot":""}